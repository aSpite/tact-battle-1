#include "imports/stdlib.fc";

;; slice get_voter_address() impure asm """
;;     x{800372E6ADA7572CDADF5606D9C7658CBE884A65DA66014BBC6EBB58E80E8EB8153_} PUSHSLICE
;; """;

cell set_original_code() impure asm """
    B{b5ee9c72410104010087000208ad4de08e0102000001d8ff008e88f4a413f4bcf2c80bed53208e573033d074d721fa4030ed44d0d307d307fa40308210680c0fe4f823b9f27304820afaf080b9f2755132c705f27221c8cf8508ce70cf0b6ec98042fb00038020d721d70a009202a49301a458e2c8cb07cb0701cf16c9ed54e1ed43d9030017a64e58bb513434c1f4c1cc200f154bb5} B>boc PUSHREF
    c5 POP
""";

cell set_initial_data() impure asm """
    B{b5ee9c72410101010005000005000020370ec007} B>boc PUSHREF
    c4 POP
""";

() myCashback(slice to) impure asm """
    NEWC
    x{42_} STSLICECONST
    STSLICE
    0 PUSHINT
    111 STUR
    ENDC
    66 PUSHINT
    SENDRAWMSG
""";

int check_prefix(slice s1, slice slice2) impure asm "SDPFX";
slice get_prefix() impure asm "x{00000001C_} PUSHSLICE";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(slice_bits(get_data().begin_parse()) == 65) {
        set_original_code();
        set_initial_data();
        commit();
        throw(0);
    }

    slice cs = in_msg_full.begin_parse();
    cs~skip_bits(4);
    slice msg::sender = cs~load_msg_addr();

    ;; if (slice_empty?(in_msg_body)) {
    ;;     throw(0);
    ;; }

    slice data = get_data().begin_parse();
    int yesCount = data~load_uint(8);
    int noCount = data~load_uint(8);
    slice previousVoter = data~load_msg_addr();
    throw_if(51, 1745828117 < now());
    throw_if(53, msg_value < 50000000);
    throw_if(50, equal_slices_bits(previousVoter, msg::sender));
    previousVoter = msg::sender;
    myCashback(msg::sender);
    in_msg_body~skip_bits(32);
    if (in_msg_body.preload_int(1)) {
        yesCount += 1;
    } else {
        noCount += 1;
    }
    set_data(begin_cell()
        .store_uint(yesCount, 8)
        .store_uint(noCount, 8)
        .store_slice(previousVoter)
        .end_cell()
    );
}

_ %proposalState() method_id(80226) {
    slice data = get_data().begin_parse();
    int yesCount = data~load_uint(8);
    int noCount = data~load_uint(8);
    return (
        yesCount,
        noCount
    );
}

() __tact_selector_hack_asm() impure asm """
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.

                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@

                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap

                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop

                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap

                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond

                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>

                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
    """;

;; () __tact_selector_hack() method_id(65535) {
;;     return __tact_selector_hack_asm();
;; }